Основные функции/конструкции которые точно нужно запомнить

Неизменяемый метод - метод, который не изменяет переменную, а возвращает новую, например чтобы изменить строку str = "dskj" и
    привести её в верхний регистр нужно: str = str.toUpperCase();

Для работы с классом строк:
String.join(строка_с_разделителем прим.(" "), массив слов) - Метод слепляет массив слов в строку, ставя между ними
    строку с разделителем.
String.valueOf(значение) - Преобразует значение в строку. Значение может быть числом, дробью, массивом символов.

Для работы со строковыми переменными:
Строка.split(строка_с_разделителем прим.(" ")) - Метод разбивает строку на массив строк по разделителю
Строка.toUpperCase() - Метод поднимает все буквы строки в верхний регистр. Неизменяемый метод.
Строка.toLowerCase() - Метод обратный toUpperCase
Строка.indexOf(искомая_подстрока, необязательный_численный_аргумент_индекс_с_которого_начинать_искать) - Метод
	ищет подстроку в строке и если находит, возвращает индекс начала её первого вхождения. Если нужно найти не 
	строку а букву, например char c, пишем так строка.indexOf(c + ""); Если метод не нашёл подстроку, возврашает -1
Строка.substring(индекс_начала(включительно), индекс_конца(не включительно)) - Возвращает срез строки как [::] в питоне. 
Строка.contains(искомая_строка) - Метод возвращает true если находит искомая_строка в Строка. false если нет.
Строка.charAt(индекс) - Возвращает символ находящийся в строке под индексом индекс.
Строка.length() - Возвращает длину строки.
Строка.equals(строка2) - сравнивает две строки.

Для работы со StringBuilder:
StringBuilder - имитация строки для использования конкатенации. Соответсвенно есть почти все методы от строк.
StringBuilder sb = new StringBuilder(Можем_поместить_сюда_строку_или_символ);
sb.append(Строка/число/символ) - Добавляем к строке что-то.
sb.reverse() - Разворачивает строку.
sb.toString() - Преобразует sb в настоящую строку.

Для работы с массивами:
массив.length - кол-во элементов массива.
массив[i] - возвращает i-тый элемент массива.

Создание массива:
int[] arr = new int[длина массива] - Одномерный целочисленный массив, ненулевой длины
int[][] arr = new int[длина массива][длина массива] - Двумерный целочисленный массив.

int[] arr = new int[]{1, 2, 3} - Одномерный целочисленный массив с известными значениями.
int[][] arr = new int[][]{{1, 2}, {2, 3}} - Двумерный целочисленный массив с известными значениями.

Указание массива в аргументах функции:
(int[] arr)
(int[][] arr)

Для работы с классом массива:
Arrays.toString(массив) - Преобразует массив в строку. Очень удобно для вывода.
Arrays.copyOf(массив) - Возвращает копию массива.
Arrays.sort(массив) - Сортирует предложенный массив в зависимости от типа данных. Изменяемый метод.

Для работы с целыми числами:
Integer.parseInt - преобразует строку с числом в int число.

Для работы с дробными:
Double.parseDouble - преобразует строку с числом в double число.

